{"version":3,"sources":["components/Card.js","components/Deck.js","App.js","index.js"],"names":["translateTag","tag","deck","length","value","suit","exercise","count","slice","String","Card","startOver","setStartOver","showRemainingCount","backs","useState","Math","floor","random","currentCard","setCurrentCard","setDeck","Date","startTime","setStartTime","currentTime","setCurrentTime","firstClickPressed","setFirstClickPressed","testEnv","window","location","origin","timer","useRef","useEffect","tempDeck","values","suits","i","x","card","push","getDeck","location1","location2","tmp","shuffle","cards","concat","current","setInterval","clearInterval","onClick","console","log","desiredLength","shift","className","src","process","alt","style","textAlign","format","addSeconds","differenceInSeconds","Deck","setShowRemainingCount","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cd6e8261.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport  { differenceInSeconds, addSeconds, format } from 'date-fns';\n// var differenceInMilliseconds = require('date-fns/differenceInMilliseconds')\n\n/*\nTODO:\nAdd custom exercises\nAdd show count\nAdd historic\n*/\n\nconst Card = ( { startOver, setStartOver, showRemainingCount } ) => {\n  let backs = [\"blue_back\", \"green_back\", \"purple_back\", \"gray_back\", \"red_back\", \"yellow_back\"];\n  const [currentCard, setCurrentCard] = useState(backs[Math.floor(Math.random() * backs.length)]);\n  const [deck, setDeck] = useState([]);\n  const [startTime, setStartTime] = useState(new Date());\n  const [currentTime, setCurrentTime] = useState(startTime);\n  const [firstClickPressed, setFirstClickPressed] = useState(false);\n  let testEnv = window.location.origin === \"http://localhost:3000\";\n  const timer = useRef(null);\n\n\n  const onClick = () => {\n    console.log(deck.length);\n    if (deck.length > 0) {\n      let desiredLength = testEnv === true ? 4 : 52;\n      if (deck.length === desiredLength) {\n        setFirstClickPressed(true);\n      }\n      setCurrentCard(deck.shift());\n    }\n    else {\n      // figure out how to stop the timer\n      clearInterval(timer.current);\n      setCurrentCard(backs[Math.floor(Math.random() * backs.length)]);\n    }\n  };\n\n  useEffect(() => {\n    let tempDeck = getDeck(testEnv);\n    shuffle(tempDeck);\n    var cards = [];\n    for (var card in tempDeck) {\n      cards.push(String(tempDeck[card][\"value\"]).concat(tempDeck[card][\"suit\"]))\n    }\n    setDeck(cards);\n\n    return ()  => {\n      //Reset the deck\n      setFirstClickPressed(false);\n      setStartOver(false);\n      setStartTime(new Date());\n      setCurrentTime(new Date());\n      setCurrentCard(backs[Math.floor(Math.random() * backs.length)]);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [startOver]);\n\n  useEffect(() => {\n\n    if (firstClickPressed) {\n      setStartTime(new Date());\n      setFirstClickPressed(false);\n      timer.current = setInterval(() => {\n        setCurrentTime(new Date());\n      }, 1000);\n\n    }\n\n    if (startOver) {\n      return () => {\n        clearInterval(timer.current);\n        setCurrentTime(new Date());\n      }\n    }\n\n  }, [firstClickPressed, startOver])\n\n\n  // <img src={`images/${currentCard}.png`} alt={currentCard} />\n  return (\n    <div onClick={onClick} className=\"ui centered card\">\n      <div className=\"image\">\n        <img src={`${process.env.PUBLIC_URL}/images/${currentCard}.png`} alt={translateTag(currentCard, deck)[0]} />\n      </div>\n      <div style={{textAlign:\"center\"}} className=\"content\">\n        <p className=\"header\">{translateTag(currentCard, deck)[1]}</p>\n        <p>\n          {showRemainingCount ? `Remaining: ${deck.length} | ` : \"\"}\n          Elapsed time: {format(addSeconds(new Date(0), differenceInSeconds(currentTime, startTime)), 'mm:ss')}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction translateTag(tag, deck) {\n  if (tag.length > 3) {\n    if (deck.length > 0) {\n      return [\"deck\", \"Click on the card to start\"];\n    }\n    else {\n      return [\"deck\", \"Completed\"]\n    }\n  }\n\n  let value = null;\n  let suit = null;\n  let exercise = null;\n  let count = null;\n\n  //convert the value\n  switch (tag.slice(0, tag.length-1)) {\n    case \"A\":\n      value = \"Ace\";\n      count = 14;\n      break;\n    case \"J\":\n      value = \"Jack\";\n      count = 11;\n      break;\n    case \"Q\":\n      value = \"Queen\";\n      count = 12;\n      break;\n    case \"K\":\n      value = \"King\";\n      count = 13;\n      break;\n    default:\n      value = String(tag[0])\n      count = tag.slice(0, tag.length-1)\n      break;\n  }\n\n  //convert the suit\n  switch (tag[tag.length-1]) {\n    case \"S\":\n      suit = \"Spades\";\n      exercise = \"push ups\";\n      break;\n    case \"H\":\n      suit = \"Hearts\";\n      exercise = \"squats\";\n      break;\n    case \"D\":\n      suit = \"Diamonds\";\n      exercise = \"sit ups\";\n      break;\n    case \"C\":\n      suit = \"Clubs\";\n      exercise = \"burpees\";\n      break;\n    default:\n      suit = \"oopsie woopsie something went wrong\";\n      exercise = \"rest\"\n  }\n  // return [\"1\", \"2\"]\n  return [`${value} of ${suit}`, `${count} ${exercise}`];\n}\n\n//https://www.thatsoftwaredude.com/content/6196/coding-a-card-deck-in-javascript\nfunction getDeck(testEnv)\n{\n  let values, suits;\n  if (testEnv) {\n    values = [\"A\",2];\n    suits = [\"S\",\"H\"];\n  }\n  else {\n    values = [\"A\",2,3,4,5,6,7,8,9,10,\"J\",\"Q\",\"K\"];\n    suits = [\"S\",\"H\",\"C\",\"D\"];\n  };\n\n\tvar deck = [];\n\n\tfor(var i = 0; i < suits.length; i++)\n\t{\n\t\tfor(var x = 0; x < values.length; x++)\n\t\t{\n\t\t\tvar card = {value: values[x], suit: suits[i]};\n\t\t\tdeck.push(card);\n\t\t}\n\t}\n\n\treturn deck;\n}\n\nfunction shuffle(deck)\n{\n\t// for 1000 turns\n\t// switch the values of two random cards\n\tfor (var i = 0; i < 1000; i++)\n\t{\n\t\tvar location1 = Math.floor((Math.random() * deck.length));\n\t\tvar location2 = Math.floor((Math.random() * deck.length));\n\t\tvar tmp = deck[location1];\n\n\t\tdeck[location1] = deck[location2];\n\t\tdeck[location2] = tmp;\n\t}\n}\n\nexport default Card;\n","import React, { useState } from 'react';\nimport Card from './Card';\n\nconst Deck = () => {\n  const [startOver, setStartOver] = useState(false);\n  const [showRemainingCount, setShowRemainingCount] = useState(false);\n\n  // passing startOver and setStartOver in Card so that it can know when\n  // to reset and also change the state afterwards\n  return (\n    <div style={{textAlign:\"center\"}} className=\"ui container\">\n      <Card startOver={startOver} setStartOver={setStartOver} showRemainingCount={showRemainingCount}/>\n      <button onClick={() => setStartOver(true)} className=\"positive ui button\">Shuffle Deck</button>\n\n      <button\n        onClick={() => setShowRemainingCount(!showRemainingCount)}\n        className={`ui toggle ${showRemainingCount ? \"positive\" : \"\"} button`}\n        >Show Count Left\n      </button>\n    </div>\n  );\n}\n\nexport default Deck;\n","import React from 'react';\nimport Deck from './components/Deck'\n\nconst App = () => {\n  return <Deck />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}