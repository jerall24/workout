{"version":3,"sources":["components/Card.js","components/Deck.js","App.js","index.js"],"names":["translateTag","tag","deck","length","value","suit","exercise","count","slice","String","Card","startOver","setStartOver","backs","useState","Math","floor","random","currentCard","setCurrentCard","setDeck","Date","startTime","setStartTime","currentTime","setCurrentTime","useEffect","tempDeck","values","suits","i","x","card","push","getDeck","location1","location2","tmp","shuffle","cards","concat","secTimer","setInterval","clearInterval","onClick","shift","className","src","process","alt","style","textAlign","format","addSeconds","differenceInSeconds","Deck","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a4bd943a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport  { differenceInSeconds, addSeconds, format } from 'date-fns';\n// var differenceInMilliseconds = require('date-fns/differenceInMilliseconds')\n\n/*\nTODO:\nAdd custom exercises\nAdd show count\nAdd historic\nAdd time\n*/\n\nconst Card = ( { startOver, setStartOver } ) => {\n  // const [currentNumber, setCurrentNumber] = useState(null);\n  // const [currentSuit, setCurrentSuit] = useState(null);\n  let backs = [\"blue_back\", \"green_back\", \"purple_back\", \"gray_back\", \"red_back\", \"yellow_back\"];\n  const [currentCard, setCurrentCard] = useState(backs[Math.floor(Math.random() * backs.length)]);\n  const [deck, setDeck] = useState([]);\n  const [startTime, setStartTime] = useState(new Date());\n  const [currentTime, setCurrentTime] = useState(startTime);\n\n\n  const onClick = () => {\n    if (deck.length > 0) {\n      setCurrentCard(deck.shift());\n    }\n    else {\n      // figure out how to stop the timer\n      setCurrentCard(backs[Math.floor(Math.random() * backs.length)]);\n    }\n  };\n\n  useEffect(() => {\n    let tempDeck = getDeck();\n    shuffle(tempDeck);\n    var cards = [];\n    for (var card in tempDeck) {\n      cards.push(String(tempDeck[card][\"value\"]).concat(tempDeck[card][\"suit\"]))\n    }\n    setDeck(cards);\n\n    let secTimer = setInterval( () => {\n      setCurrentTime(new Date())\n    },1000)\n\n    if (startOver) {\n      //Reset the deck\n\n      setStartTime(new Date());\n      setCurrentTime(new Date());\n      setStartOver(false);\n      setCurrentCard(backs[Math.floor(Math.random() * backs.length)]);\n\n    }\n    return () => clearInterval(secTimer);\n  }, [startOver]);\n\n\n  // <img src={`images/${currentCard}.png`} alt={currentCard} />\n  return (\n    <div onClick={onClick} className=\"ui centered card\">\n      <div className=\"image\">\n        <img src={`${process.env.PUBLIC_URL}/images/${currentCard}.png`} alt={translateTag(currentCard, deck)[0]} />\n      </div>\n      <div style={{textAlign:\"center\"}} className=\"content\">\n        <a className=\"header\">{translateTag(currentCard, deck)[1]}</a>\n        Elapsed time: {format(addSeconds(new Date(0), differenceInSeconds(currentTime, startTime)), 'mm:ss')}\n      </div>\n    </div>\n  );\n}\n\nfunction translateTag(tag, deck) {\n  if (tag.length > 3) {\n    if (deck.length > 0) {\n      return [\"deck\", \"Click on the card to start\"];\n    }\n    else {\n      return [\"deck\", \"It's over congrats!!!!\"]\n    }\n  }\n\n  let value = null;\n  let suit = null;\n  let exercise = null;\n  let count = null;\n\n  //convert the value\n  switch (tag.slice(0, tag.length-1)) {\n    case \"A\":\n      value = \"Ace\";\n      count = 14;\n      break;\n    case \"J\":\n      value = \"Jack\";\n      count = 11;\n      break;\n    case \"Q\":\n      value = \"Queen\";\n      count = 12;\n      break;\n    case \"K\":\n      value = \"King\";\n      count = 13;\n      break;\n    default:\n      value = String(tag[0])\n      count = tag.slice(0, tag.length-1)\n      break;\n  }\n\n  //convert the suit\n  switch (tag[tag.length-1]) {\n    case \"S\":\n      suit = \"Spades\";\n      exercise = \"push ups\";\n      break;\n    case \"H\":\n      suit = \"Hearts\";\n      exercise = \"squats\";\n      break;\n    case \"D\":\n      suit = \"Diamonds\";\n      exercise = \"sit ups\";\n      break;\n    case \"C\":\n      suit = \"Clubs\";\n      exercise = \"burpees\";\n      break;\n  }\n  // return [\"1\", \"2\"]\n  return [`${value} of ${suit}`, `${count} ${exercise}`];\n}\n\n//https://www.thatsoftwaredude.com/content/6196/coding-a-card-deck-in-javascript\nfunction getDeck()\n{\n  // const values = [\"A\",2,3,4,5,6,7,8,9,10,\"J\",\"Q\",\"K\"];\n  // const suits = [\"S\",\"H\",\"C\",\"D\"];\n  const values = [\"A\",2];\n  const suits = [\"S\",\"H\"];\n\tvar deck = [];\n\n\tfor(var i = 0; i < suits.length; i++)\n\t{\n\t\tfor(var x = 0; x < values.length; x++)\n\t\t{\n\t\t\tvar card = {value: values[x], suit: suits[i]};\n\t\t\tdeck.push(card);\n\t\t}\n\t}\n\n\treturn deck;\n}\n\nfunction shuffle(deck)\n{\n\t// for 1000 turns\n\t// switch the values of two random cards\n\tfor (var i = 0; i < 1000; i++)\n\t{\n\t\tvar location1 = Math.floor((Math.random() * deck.length));\n\t\tvar location2 = Math.floor((Math.random() * deck.length));\n\t\tvar tmp = deck[location1];\n\n\t\tdeck[location1] = deck[location2];\n\t\tdeck[location2] = tmp;\n\t}\n}\n\nexport default Card;\n","import React, { useState } from 'react';\nimport Card from './Card';\nimport StartOver from './StartOver';\n\nconst Deck = () => {\n  const [startOver, setStartOver] = useState(false);\n\n  // passing startOver and setStartOver in Card so that it can know when\n  // to reset and also change the state afterwards\n  return (\n    <div style={{textAlign:\"center\"}}>\n      <Card startOver={startOver} setStartOver={setStartOver}/>\n      <button onClick={() => setStartOver(true)} className=\"positive ui button large\">Shuffle Deck</button>\n    </div>\n  );\n}\n\nexport default Deck;\n","import React from 'react';\nimport Deck from './components/Deck'\n\nconst App = () => {\n  return <Deck />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}