{"version":3,"sources":["components/Card.js","components/Deck.js","App.js","index.js"],"names":["translateTag","tag","deck","length","value","suit","exercise","count","slice","String","Card","number","useState","currentCard","setCurrentCard","setDeck","useEffect","tempDeck","values","suits","i","x","card","push","getDeck","location1","Math","floor","random","location2","tmp","shuffle","cards","concat","onClick","shift","className","src","process","alt","style","textAlign","Deck","App","ReactDOM","render","document","querySelector"],"mappings":"mJAyCA,SAASA,EAAaC,EAAKC,GACzB,GAAW,QAAPD,EACF,OAAIC,EAAKC,OAAS,EACT,CAAC,OAAQ,SAGT,CAAC,OAAQ,0BAIpB,IAAIC,EAAQ,KACRC,EAAO,KACPC,EAAW,KACXC,EAAQ,KAGZ,OAAQN,EAAIO,MAAM,EAAGP,EAAIE,OAAO,IAC9B,IAAK,IACHC,EAAQ,MACRG,EAAQ,GACR,MACF,IAAK,IACHH,EAAQ,OACRG,EAAQ,GACR,MACF,IAAK,IACHH,EAAQ,QACRG,EAAQ,GACR,MACF,IAAK,IACHH,EAAQ,OACRG,EAAQ,GACR,MACF,QACEH,EAAQK,OAAOR,EAAI,IACnBM,EAAQN,EAAIO,MAAM,EAAGP,EAAIE,OAAO,GAKpC,OAAQF,EAAIA,EAAIE,OAAO,IACrB,IAAK,IACHE,EAAO,SACPC,EAAW,WACX,MACF,IAAK,IACHD,EAAO,SACPC,EAAW,SACX,MACF,IAAK,IACHD,EAAO,WACPC,EAAW,UACX,MACF,IAAK,IACHD,EAAO,QACPC,EAAW,UAIf,MAAO,CAAC,GAAD,OAAIF,EAAJ,eAAgBC,GAAhB,UAA2BE,EAA3B,YAAoCD,IAqC9BI,MAtIF,SAAC,GAAqB,EAAnBC,OAAmB,EAAXN,KAAY,IAGlC,EAAsCO,mBAAS,QAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOV,EAAP,KAAaa,EAAb,KAsBA,OAXAC,qBAAU,WACR,IAAIC,EAqFR,WAMC,IAJC,IAAMC,EAAS,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,IAAI,KACzCC,EAAQ,CAAC,IAAI,IAAI,IAAI,KACxBjB,EAAO,GAEHkB,EAAI,EAAGA,EAAID,EAAMhB,OAAQiB,IAEhC,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAOf,OAAQkB,IAClC,CACC,IAAIC,EAAO,CAAClB,MAAOc,EAAOG,GAAIhB,KAAMc,EAAMC,IAC1ClB,EAAKqB,KAAKD,GAIZ,OAAOpB,EApGWsB,IAuGnB,SAAiBtB,GAIhB,IAAK,IAAIkB,EAAI,EAAGA,EAAI,IAAMA,IAC1B,CACC,IAAIK,EAAYC,KAAKC,MAAOD,KAAKE,SAAW1B,EAAKC,QAC7C0B,EAAYH,KAAKC,MAAOD,KAAKE,SAAW1B,EAAKC,QAC7C2B,EAAM5B,EAAKuB,GAEfvB,EAAKuB,GAAavB,EAAK2B,GACvB3B,EAAK2B,GAAaC,GAjHhBC,CAAQd,GACR,IAAIe,EAAQ,GACZ,IAAK,IAAIV,KAAQL,EACfe,EAAMT,KAAKd,OAAOQ,EAASK,GAAT,OAAyBW,OAAOhB,EAASK,GAAT,OAEpDP,EAAQiB,KACP,IAID,sBAAKE,QArBS,WACVhC,EAAKC,OAAS,EAChBW,EAAeZ,EAAKiC,SAGpBrB,EAAe,SAgBMsB,UAAU,mBAAjC,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAKC,IAAG,UAAKC,WAAL,mBAAsCzB,EAAtC,QAAyD0B,IAAKvC,EAAaa,EAAaX,GAAM,OAExG,qBAAKsC,MAAO,CAACC,UAAU,UAAWL,UAAU,UAA5C,SACE,mBAAGA,UAAU,SAAb,SAAuBpC,EAAaa,EAAaX,GAAM,WC1BhDwC,EANF,WACX,OACE,cAAC,EAAD,KCEWC,EAJH,WACV,OAAO,cAAC,EAAD,KCATC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.10a54f4f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\n\nconst Card = ({ number, suit }) => {\n  // const [currentNumber, setCurrentNumber] = useState(null);\n  // const [currentSuit, setCurrentSuit] = useState(null);\n  const [currentCard, setCurrentCard] = useState(\"deck\");\n  const [deck, setDeck] = useState([]);\n\n  const onClick = () => {\n    if (deck.length > 0) {\n      setCurrentCard(deck.shift());\n    }\n    else {\n      setCurrentCard(\"deck\");\n    }\n  };\n\n  useEffect(() => {\n    let tempDeck = getDeck();\n    shuffle(tempDeck);\n    var cards = [];\n    for (var card in tempDeck) {\n      cards.push(String(tempDeck[card][\"value\"]).concat(tempDeck[card][\"suit\"]))\n    }\n    setDeck(cards);\n  }, []);\n\n  // <img src={`images/${currentCard}.png`} alt={currentCard} />\n  return (\n    <div onClick={onClick} className=\"ui centered card\">\n      <div className=\"image\">\n        <img src={`${process.env.PUBLIC_URL}/images/${currentCard}.png`} alt={translateTag(currentCard, deck)[0]} />\n      </div>\n      <div style={{textAlign:\"center\"}} className=\"content\">\n        <a className=\"header\">{translateTag(currentCard, deck)[1]}</a>\n      </div>\n    </div>\n  );\n}\n\nfunction translateTag(tag, deck) {\n  if (tag == \"deck\") {\n    if (deck.length > 0) {\n      return [\"deck\", \"start\"];\n    }\n    else {\n      return [\"deck\", \"It's over congrats!!!!\"]\n    }\n  }\n\n  let value = null;\n  let suit = null;\n  let exercise = null;\n  let count = null;\n\n  //convert the value\n  switch (tag.slice(0, tag.length-1)) {\n    case \"A\":\n      value = \"Ace\";\n      count = 14;\n      break;\n    case \"J\":\n      value = \"Jack\";\n      count = 11;\n      break;\n    case \"Q\":\n      value = \"Queen\";\n      count = 12;\n      break;\n    case \"K\":\n      value = \"King\";\n      count = 13;\n      break;\n    default:\n      value = String(tag[0])\n      count = tag.slice(0, tag.length-1)\n      break;\n  }\n\n  //convert the suit\n  switch (tag[tag.length-1]) {\n    case \"S\":\n      suit = \"Spades\";\n      exercise = \"push ups\";\n      break;\n    case \"H\":\n      suit = \"Hearts\";\n      exercise = \"squats\";\n      break;\n    case \"D\":\n      suit = \"Diamonds\";\n      exercise = \"sit ups\";\n      break;\n    case \"C\":\n      suit = \"Clubs\";\n      exercise = \"burpees\";\n      break;\n  }\n  // return [\"1\", \"2\"]\n  return [`${value} of ${suit}`, `${count} ${exercise}`];\n}\n\n//https://www.thatsoftwaredude.com/content/6196/coding-a-card-deck-in-javascript\nfunction getDeck()\n{\n  const values = [\"A\",2,3,4,5,6,7,8,9,10,\"J\",\"Q\",\"K\"];\n  const suits = [\"S\",\"H\",\"C\",\"D\"];\n\tvar deck = [];\n\n\tfor(var i = 0; i < suits.length; i++)\n\t{\n\t\tfor(var x = 0; x < values.length; x++)\n\t\t{\n\t\t\tvar card = {value: values[x], suit: suits[i]};\n\t\t\tdeck.push(card);\n\t\t}\n\t}\n\n\treturn deck;\n}\n\nfunction shuffle(deck)\n{\n\t// for 1000 turns\n\t// switch the values of two random cards\n\tfor (var i = 0; i < 1000; i++)\n\t{\n\t\tvar location1 = Math.floor((Math.random() * deck.length));\n\t\tvar location2 = Math.floor((Math.random() * deck.length));\n\t\tvar tmp = deck[location1];\n\n\t\tdeck[location1] = deck[location2];\n\t\tdeck[location2] = tmp;\n\t}\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst Deck = () => {\n  return (\n    <Card />\n  );\n}\n\nexport default Deck;\n","import React from 'react';\nimport Deck from './components/Deck'\n\nconst App = () => {\n  return <Deck />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}